package day14.api.regex;

import java.util.Arrays;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class RegexEx02 {

	public static void main(String[] args) {
		
		/*
		 * [0-9]{2, 4} 숫자 중 2~4개 연속된 형태
		 * [0-9]{3} 0~9숫자 중 3개가 연속된 형태
		 * [A-Z]+ A-Z 대문자 한 개 이상
		 * [a-zA-Z]? 소문자나 대문자 중 알파벳이 0~1개 나오는 경우
		 * [가-힣]* 한글 0회 이상 나올 수 있다.
		 * 
		 * 정규표현식에 속하지 않는 문자는 그냥 사용할 수 있다.
		 * -,%# 이런 문자들..
		 * [0-9]{3}-[0-9]{4}  숫자 3개 - 숫자 4개 나오는 형태
		 * 
		 * 정규표현식에 포함되는 문자를 쓰고 싶다면 \\ 사용
		 * \\+  -> \가 1개 이상
		 * \?+ -> ?가 1개 이상
		 * 
		 * 정확히 일치하는 문자
		 * \?. -> 정확히 ?에 일치하는 문자는
		 * [0-9]{3}원 000원의 형식을 가짐
		 * 
		 * \\d [0-9]와 같은 의미
		 * \\w [a-zA-Z]와 같은 의미
		 * \\s 공백을 나타냄
		 * 
		 */
		
		
		String info = "홍길동/주소/02-123-4567/aaa123@naver.com";
		String info2 = "이순신/주소/010-123405678/bbb123@gmail.com";
		
		
		//전화번호 형식
		String pattern1 = "\\d{2,3]-\\d{3,4}-//d{4}";		
		
		//이메일 형식 (숫자문자@문자.문자)
		String pattern2 = "[a-zA-Z0-9]+@[a-z]+.[a-z]+"; 
		
		//패턴을 컴파일(컴퓨터가 이해할 수 있게 변환해주는 작업) - 패턴 형식으로 반환!
		Pattern p = Pattern.compile(pattern1);
		Pattern p2 = Pattern.compile(pattern2);
		
//		p.matcher(문자열); //매처 객체로 반환시켜줄 것.
		
		//찾는 작업		
		Matcher m = p.matcher(info);
		Matcher m2 = p2.matcher(info);
		
		
		//find() - 일치하는 부분이 있으면 true
		//start() - 일치하는 부분의 첫번째 인덱스
		//end() - 일치하는 부분의 마지막 인덱스
		//group() - 일치하는 부분의 추출
		
		
		while(m.find()) { //만약 패턴이 여러번 나오면 순서대로 찾습니다.
			
			System.out.println("첫 번째 인덱스:" + m.start());
			System.out.println("마지막 인덱스:" + m.end());
			System.out.println(m.group());
			
		}
		
		while( m2.find() ) { //패턴을 가장 처음 발견되는 1번 찾습니다.
			
			System.out.println("첫 번째 인덱스:" + m2.start());
			System.out.println("마지막 인덱스:" + m2.end());
			System.out.println(m2.group());
		}
		
		System.out.println("----------------------------------------------------------------");
		
		List<String> list = Arrays.asList(info, info2); 
		System.out.println(list.toString());
		
		
		//찾기위해 반복을 돌려야함
		for(int i = 0; i < list.size(); i++) { //순서대로 회전
			
			String str = list.get(i);
			//패턴생성
			//Pattern x = Pattern.compile(pattern1);
			//Matcher y = x.matcher(str); //pattern1에 대한 matcher
			
			Matcher x = Pattern.compile(pattern1).matcher(str); //1번째 패턴
			Matcher y = Pattern.compile(pattern2).matcher(str); //2번째 패턴
			
			//반복 돌 때마다 한 번씩 찾을 것..
			if(x.find() && y.find() ) { //둘 다 찾았으면
				System.out.println( x.group() );
				System.out.println( y.group() );
			}
			
		}
		
		
		
		
	}
}
